# -*- coding: utf-8 -*-
"""dogsAndCats.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uYJl5DLdvoNeRAcHVP15rbEFGrW90_2K
"""

# !pip install -q kaggle
# !mkdir -p ~/.kaggle
# !cp kaggle.json ~/.kaggle/
# !ls ~/.kaggle
# !chmod 600 /root/.kaggle/kaggle.json
# !kaggle competitions download -c dogs-vs-cats
# !unzip -q train.zip -d .
# !unzip -q test1.zip -d .
# # !for file in $(ls -p | grep -v / | head -1); do mv ./train/$file ./train; done file in $(ls -p | grep -v / | tail -1); do mv fd/fd1/fd2/fd3/$file ../; done

# import os
# import shutil

# r = len(os.listdir('./train'))
# print(r)

# !mkdir ./train/cats
# !mkdir ./train/dogs

# for x in range(int(r/2)):
#   shutil.move(f'./train/cat.{x}.jpg', './train/cats/')
#   shutil.move(f'./train/dog.{x}.jpg', './train/dogs/')

# !mkdir ./validation
# !mkdir ./validation/cats
# !mkdir ./validation/dogs

# for x in range(1000):
#   shutil.move(f'./train/cats/cat.{x}.jpg', './validation/cats/')
#   shutil.move(f'./train/dogs/dog.{x}.jpg', './validation/dogs/')

# !mkdir ./test
# !mv ./test1 ./test
# !mv ./test/test1 ./test/test

# !mkdir ./models

# print(len(os.listdir('./train/cats/')))
# print(len(os.listdir('./train/dogs/')))
# print(len(os.listdir('./validation/cats/')))
# print(len(os.listdir('./validation/dogs/')))
# print(len(os.listdir('./test/test')))

# print(len(os.listdir('./validation/')))
# print(len(os.listdir('./train/')))
# print(len(os.listdir('./test/')))

# from google.colab import drive
# drive.mount('/content/gdrive')

# print('Done')

import numpy as np
import pandas as pd
import random
import os 
from zipfile import ZipFile
import tensorflow as tf
import keras
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator

validationDir = './validation/'
vCatsDir = './validation/cats/'
vDogsDir = './validation/dogs/'
trainDir = './train/'
tCatsDir = './train/cats/'
tDogsDir = './train/dogs/'
testDir = './test/'

EPOCHS = 20
WIDTH = 200
HEIGHT = 200
BATCH_SIZE = 150

trainNum = len(os.listdir('./train/cats/')) + len(os.listdir('./train/dogs/'))
ValidNum = len(os.listdir('./validation/cats/')) + len(os.listdir('./validation/dogs/'))


trainImageGen = ImageDataGenerator(
    rescale = 1./255,
    horizontal_flip = True,
    vertical_flip = True,
    shear_range=0.1,
    zoom_range=0.1
)
vImageGen = ImageDataGenerator(rescale=1./255)
testImageGen = ImageDataGenerator(rescale=1./255)

trainData = trainImageGen.flow_from_directory(
    directory = trainDir,
    batch_size = BATCH_SIZE,
    target_size = (WIDTH, HEIGHT),
    class_mode = 'binary'
)

validationData = vImageGen.flow_from_directory(
    directory = validationDir,
    batch_size = BATCH_SIZE,
    target_size = (WIDTH, HEIGHT),
    class_mode = 'binary'
)

testData = testImageGen.flow_from_directory(
    directory= testDir,
    class_mode = 'binary',
    target_size = (WIDTH, HEIGHT),
    batch_size = 1
)

def createModel():
  #model
  model = keras.models.Sequential()

  model.add(keras.layers.Conv2D(32, (3,3), padding='same', activation='relu', input_shape=(HEIGHT, WIDTH, 3)))
  model.add(keras.layers.MaxPool2D())

  model.add(keras.layers.Conv2D(64, (3,3), padding='same', activation='relu'))
  model.add(keras.layers.MaxPool2D())

  model.add(keras.layers.Conv2D(128, (3,3), padding='same', activation='relu'))
  model.add(keras.layers.MaxPool2D())

  model.add(keras.layers.Conv2D(256, (3,3), padding='same', activation='relu'))
  model.add(keras.layers.MaxPool2D())

  model.add(keras.layers.Dropout(0.5))
  model.add(keras.layers.Flatten())
  model.add(keras.layers.Dropout(0.5))
  model.add(keras.layers.Dense(512, activation='relu'))
  model.add(keras.layers.Dense(1, activation='sigmoid'))

  model.compile(optimizer = 'adam', loss='binary_crossentropy', metrics=['accuracy'])

  return model


def trainModel(model):
  
  h = model.fit_generator(
      trainData,
      steps_per_epoch = trainNum // BATCH_SIZE,
      epochs = EPOCHS,
      validation_data = validationData,
      validation_steps = ValidNum // BATCH_SIZE,
      shuffle = True
  )
  print(h)
  return h

def testModel(model):

  x = model.predict_generator(testData, 30)
  for n, p in enumerate(x):
    plt.imshow(testData[n][0][0])
    plt.axis('off')
    plt.title(f'{p[0]*100}% Dog')
    plt.tight_layout()
    plt.show()

def showDifference(history):
  h = history.history
  acc = h['accuracy']
  valAcc = h['val_accuracy']
  loss = h['loss']
  valLoss = h['val_loss']
  r = [int(_n) for _n in range(len(acc))]

  plt.figure(figsize=(8, 8))
  
  plt.subplot(1,2,1)
  plt.plot(r, acc, label='Accuracy')
  plt.plot(r, valAcc, label='Validation Accuracy')
  plt.legend()
  plt.title('Training and Validation Accuracy')

  plt.subplot(1,2,2)
  plt.plot(r, loss, label='Loss')
  plt.plot(r, valLoss, label='Validation Loss')
  plt.legend()
  plt.title('Training and Validation Loss')

  plt.tight_layout()
  plt.show()



model = createModel()
history = trainModel(model)
keras.models.save_model(model, './models/model2.h5')
testModel(model)

showDifference(history)

from google.colab import drive
drive.mount('/content/gdrive')

model_save_name = 'classifier.pt'
path = F"/content/gdrive/My Drive/{model_save_name}" 
torch.save(model.state_dict(), path)